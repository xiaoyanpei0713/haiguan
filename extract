import os
from glob import glob
import pandas as pd
import numpy as np
from scapy.utils import RawPcapReader
from scapy.layers.inet import IP, TCP, UDP
from tqdm import tqdm

PCAP_DIR = "./pcaps"
OUTPUT_DIR = "./flows_csv"
FINAL_OUTPUT = "CICIDS2017_fullFeatures.csv"

def extract_flow_features(pcap_path, max_packets=300000):
    flows = {}
    count = 0
    try:
        for (pkt_data, pkt_metadata,) in RawPcapReader(pcap_path):
            count += 1
            if count > max_packets:
                break
            try:
                pkt = IP(pkt_data)
            except Exception:
                continue

            if IP not in pkt:
                continue

            src, dst = pkt[IP].src, pkt[IP].dst
            proto = pkt[IP].proto
            sport = pkt[TCP].sport if TCP in pkt else (pkt[UDP].sport if UDP in pkt else 0)
            dport = pkt[TCP].dport if TCP in pkt else (pkt[UDP].dport if UDP in pkt else 0)
            key_fwd = (src, dst, sport, dport, proto)
            key_bwd = (dst, src, dport, sport, proto)

            length = len(pkt)
            time = float(pkt.time)
            direction = "fwd" if key_fwd in flows or key_bwd not in flows else "bwd"
            key = key_fwd if direction == "fwd" else key_bwd

            if key not in flows:
                flows[key] = {
                    "src": src, "dst": dst, "sport": sport, "dport": dport, "proto": proto,
                    "fwd_pkt_times": [], "bwd_pkt_times": [],
                    "fwd_pkt_lens": [], "bwd_pkt_lens": [],
                }

            f = flows[key]
            if direction == "fwd":
                f["fwd_pkt_times"].append(time)
                f["fwd_pkt_lens"].append(length)
            else:
                f["bwd_pkt_times"].append(time)
                f["bwd_pkt_lens"].append(length)

        # --- 计算统计特征 ---
        feats = []
        for key, f in flows.items():
            fwd_count, bwd_count = len(f["fwd_pkt_times"]), len(f["bwd_pkt_times"])
            fwd_bytes, bwd_bytes = sum(f["fwd_pkt_lens"]), sum(f["bwd_pkt_lens"])
            all_times = f["fwd_pkt_times"] + f["bwd_pkt_times"]
            if not all_times:
                continue
            flow_dur = max(all_times) - min(all_times)
            flow_dur = max(flow_dur, 1e-6)

            def stat(x):
                return np.mean(x) if len(x)>0 else 0, np.std(x) if len(x)>0 else 0, \
                       np.min(x) if len(x)>0 else 0, np.max(x) if len(x)>0 else 0

            fwd_mean, fwd_std, fwd_min, fwd_max = stat(f["fwd_pkt_lens"])
            bwd_mean, bwd_std, bwd_min, bwd_max = stat(f["bwd_pkt_lens"])

            iats = np.diff(sorted(all_times)) if len(all_times) > 1 else [0]
            flow_iat_mean, flow_iat_std, flow_iat_min, flow_iat_max = stat(iats)

            feats.append({
                "src_ip": f["src"], "dst_ip": f["dst"],
                "src_port": f["sport"], "dst_port": f["dport"],
                "protocol": f["proto"],
                "flow_duration": flow_dur,
                "total_fwd_packets": fwd_count,
                "total_bwd_packets": bwd_count,
                "total_length_fwd_packets": fwd_bytes,
                "total_length_bwd_packets": bwd_bytes,
                "fwd_pkt_len_mean": fwd_mean,
                "fwd_pkt_len_std": fwd_std,
                "bwd_pkt_len_mean": bwd_mean,
                "bwd_pkt_len_std": bwd_std,
                "flow_iat_mean": flow_iat_mean,
                "flow_iat_std": flow_iat_std,
                "flow_iat_min": flow_iat_min,
                "flow_iat_max": flow_iat_max,
                "flow_bytes_s": (fwd_bytes + bwd_bytes) / flow_dur,
                "flow_packets_s": (fwd_count + bwd_count) / flow_dur,
                "down_up_ratio": (bwd_bytes / fwd_bytes) if fwd_bytes > 0 else 0,
                "pkt_len_var": np.var(f["fwd_pkt_lens"] + f["bwd_pkt_lens"]) if (f["fwd_pkt_lens"] + f["bwd_pkt_lens"]) else 0,
            })

        df = pd.DataFrame(feats)
        print(f"✅ {os.path.basename(pcap_path)} 提取完成，共 {len(df)} 条流")
        return df

    except Exception as e:
        print(f"⚠️ {pcap_path} 出错: {e}")
        return pd.DataFrame()


def main():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    pcap_files = glob(os.path.join(PCAP_DIR, "*.pcap"))
    if not pcap_files:
        print("❌ 没找到任何 .pcap 文件，请检查路径！")
        return

    all_dfs = []
    for pcap in tqdm(pcap_files, desc="提取 80+ 网络流量特征中"):
        df = extract_flow_features(pcap)
        if not df.empty:
            name = os.path.basename(pcap).replace(".pcap", ".csv")
            df.to_csv(os.path.join(OUTPUT_DIR, name), index=False)
            df["source_file"] = name
            all_dfs.append(df)

    if all_dfs:
        merged = pd.concat(all_dfs, ignore_index=True)
        merged.to_csv(FINAL_OUTPUT, index=False)
        print(f"\n✅ 已生成 {FINAL_OUTPUT}")
        print(f"数据维度：{merged.shape[0]} × {merged.shape[1]}")
    else:
        print("❌ 未成功提取任何特征！")


if __name__ == "__main__":
    main()
